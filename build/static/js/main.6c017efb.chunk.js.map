{"version":3,"sources":["Components/Card.js","Components/ImageSlider.js","Pages/Home.js","Components/Dropdown.js","Components/Table.js","Components/useResizeObserver.js","Components/colors.js","Components/GeoChart.js","Pages/Infographics.js","App.js","reportWebVitals.js","index.js"],"names":["Card","info","setTarget","target","history","useHistory","className","number","motto","onClick","push","size","icon","faArrowRight","ImageSlider","allTargets","images","colors","useState","displayed","setDisplayed","textOnLeft","setTextOnLeft","useEffect","interval","setInterval","length","clearInterval","textArea","style","backgroundColor","Math","floor","random","statement","imageArea","src","height","alt","TransitionGroup","CSSTransition","timeout","classNames","faChevronLeft","faChevronRight","background","map","item","idx","width","margin","borderRadius","Home","setDemography","demography","Dropdown","list","label","dropdownStatus","setDropdownStatus","color","position","top","right","faChevronUp","faChevronDown","role","type","faCheck","Table","activeArea","data","columns","field","headerName","rows","setRows","newRows","cnt","targets","forEach","targ","indicators","indi","values","pair","id","indicator","infocus","reference","loading","pageSize","rowHeight","rowsPerPageOptions","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","unobserve","GeoChart","myData","setActiveArea","svgRef","useRef","wrapperRef","names","svg","select","tooltip","append","attr","colorScale","scaleThreshold","domain","range","getBoundingClientRect","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","getScore","district","ind","filter","selectAll","features","join","on","d","transition","duration","this","html","properties","DIST_NAME","event","pageX","pageY","feature","Infographics","setIndicator","fetchData","setData","annotations","points","x","borderColor","offsetY","text","chart","events","dataPointSelection","chartContext","config","selectedDataPoints","twoDSeriesX","plotOptions","bar","columnWidth","stroke","grid","row","xaxis","labels","rotate","yaxis","title","fill","gradient","shade","shadeIntensity","gradientToColors","undefined","inverseColors","opacityFrom","opacityTo","stops","options","href","faHome","series","vals","y","name","sort","a","b","getSeries","App","axios","get","resp","console","log","exact","path","render","props","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c017efb.chunk.js","sourcesContent":["import { faArrowRight } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport { useHistory } from \"react-router\";\nexport default function Card({ info, setTarget, target }) {\n  let history = useHistory();\n  return (\n    <div className=\"target-card\">\n      <h1>{info.number}</h1>\n      <h3>{info.motto}</h3>\n      <div className=\"forward-link\" key={target}>\n        <button\n          className=\"info-link\"\n          onClick={() => {\n            setTarget(target);\n            history.push(\"/infographics\");\n          }}\n        >\n          <FontAwesomeIcon size=\"2x\" icon={faArrowRight} className=\"arrow\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n","import {\n  faChevronLeft,\n  faChevronRight,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { React, useState, useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nexport default function ImageSlider({ allTargets }) {\n  let images = [\n    \"../assets/waterfall.jpg\",\n    \"../assets/waterfall.jpg\",\n    \"../assets/waterfall.jpg\",\n    \"../assets/waterfall.jpg\",\n    \"../assets/waterfall.jpg\",\n  ];\n  let colors = [\n    \"#c8e4b4\",\n    \"#99ffcc\",\n    \"#ffcccc\",\n    \"#ffe4cc\",\n    \"#e8e4e4\",\n    \"#d0e4fc\",\n    \"#fffccc\",\n    \"#e8ccfc\",\n  ];\n  const [displayed, setDisplayed] = useState(0);\n  const [textOnLeft, setTextOnLeft] = useState(false);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setDisplayed((displayed) => (displayed + 1) % allTargets.length);\n      setTextOnLeft((textOnLeft) => !textOnLeft);\n    }, 12000);\n    return () => clearInterval(interval);\n  }, [allTargets.length]);\n  let textArea = (\n    <div\n      style={{\n        backgroundColor: colors[Math.floor(Math.random() * colors.length)],\n      }}\n      className=\"slider-text\"\n    >\n      <div className=\"text-container\">\n        <h1>{allTargets[displayed].motto}</h1>\n        <p>\n          {allTargets[displayed].number +\n            \": \" +\n            allTargets[displayed].statement}\n        </p>\n      </div>\n    </div>\n  );\n  let imageArea = (\n    <div className=\"slider-image\">\n      <img\n        src={images[Math.floor(Math.random() * images.length)]}\n        height=\"500px\"\n        alt=\"SDG2\"\n      ></img>\n    </div>\n  );\n  return (\n    <div className=\"image-slider\">\n      <TransitionGroup>\n        <CSSTransition key={displayed} timeout={200} classNames=\"messageout\">\n          <div className=\"content\">\n            {textOnLeft ? textArea : imageArea}\n            {textOnLeft ? imageArea : textArea}\n          </div>\n        </CSSTransition>\n      </TransitionGroup>\n\n      <button\n        onClick={() => {\n          setDisplayed((displayed - 1 + allTargets.length) % allTargets.length);\n\n          setTextOnLeft(!textOnLeft);\n        }}\n        className=\"button-left\"\n      >\n        <FontAwesomeIcon icon={faChevronLeft} />\n      </button>\n      <button\n        onClick={() => {\n          setDisplayed((displayed + 1) % allTargets.length);\n          setTextOnLeft(!textOnLeft);\n        }}\n        className=\"button-right\"\n      >\n        <FontAwesomeIcon icon={faChevronRight} />\n      </button>\n      <div style={{ background: \"none\" }} className=\"dots\">\n        {allTargets.map((item, idx) => (\n          <div\n            onClick={() => {\n              setDisplayed((displayed) => idx);\n            }}\n            style={{\n              backgroundColor: `${displayed === idx ? \"grey\" : \"white\"}`,\n              width: \"10px\",\n              height: \"10px\",\n              margin: \"1px\",\n              borderRadius: \"5px\",\n            }}\n            key={idx}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Card from \"../Components/Card\";\nimport ImageSlider from \"../Components/ImageSlider\";\nexport default function Home({\n  allTargets,\n  setTarget,\n  demography,\n  setDemography,\n}) {\n  let history = useHistory();\n  return (\n    <div className=\"home\">\n      <div className=\"navbar\">\n        <button>Home</button>\n        <button\n          onClick={() => {\n            setDemography(\"state\");\n            history.push(\"/infographics\");\n          }}\n        >\n          State Indicators\n        </button>\n        <button\n          onClick={() => {\n            setDemography(\"district\");\n            history.push(\"/infographics\");\n          }}\n        >\n          District Indicators\n        </button>\n        <button>FANSA</button>\n      </div>\n      <div className=\"image-slider-area\">\n        <ImageSlider allTargets={allTargets} />\n      </div>\n      <div className=\"all-targets\">\n        <div className=\"all-targets-container\">\n          {allTargets.map((item, idx) => (\n            <Card info={item} setTarget={setTarget} target={idx} key={idx} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {\n  faChevronDown,\n  faChevronUp,\n  faCheck,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { React, useState } from \"react\";\n\nexport default function Dropdown({ list, label, displayed, setDisplayed }) {\n  const [dropdownStatus, setDropdownStatus] = useState(false);\n  const alterDropdownStatus = () => {\n    setDropdownStatus(!dropdownStatus);\n  };\n  return (\n    <div className=\"dropdown\">\n      <div className=\"dropdown-label\">\n        <span>{label}:&emsp;</span>\n      </div>\n      <div className=\"dropdown-clickable\">\n        <button className=\"dropdown-header\" onClick={alterDropdownStatus}>\n          {list[displayed].number}&emsp;\n          <FontAwesomeIcon\n            style={{\n              color: \"#666666\",\n              position: \"absolute\",\n              top: \"18px\",\n              right: \"12px\",\n            }}\n            className=\"dropdown-icon\"\n            icon={dropdownStatus ? faChevronUp : faChevronDown}\n          />\n        </button>\n        {dropdownStatus && (\n          <div role=\"list\" className=\"dd-list\">\n            {list.map((item, idx) => (\n              <button\n                type=\"button\"\n                className=\"dd-list-item\"\n                onClick={() => {\n                  setDisplayed(idx);\n                }}\n                key={idx}\n              >\n                {item.number}{\" \"}\n                {displayed === idx ? <FontAwesomeIcon icon={faCheck} /> : \"\"}\n              </button>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { React, useState, useEffect } from \"react\";\nimport { DataGrid } from \"@mui/x-data-grid\";\n// import { height } from \"@mui/system\";\n// import { act } from \"react-dom/test-utils\";\n// import { CSSTransition, TransitionGroup } from \"react-transition-group\";\n// import { active } from \"d3-transition\";\nexport default function Table({ activeArea, data, demography }) {\n  const columns = [\n    { field: \"id\", headerName: \"ID\", width: 70 },\n    { field: \"target\", headerName: \"Target\", width: 120 },\n    { field: \"indicator\", headerName: \"Indicator\", width: 600 },\n    {\n      field: \"infocus\",\n      headerName: data[demography + \"_names\"][activeArea],\n      width: 150,\n    },\n    {\n      field: \"reference\",\n      headerName: \"Rajasthan\",\n      width: 150,\n    },\n  ];\n\n  const [rows, setRows] = useState([]);\n  useEffect(() => {\n    let newRows = [];\n    let cnt = 1;\n    data.targets.forEach((targ) => {\n      targ.indicators.forEach((indi) => {\n        indi.values[demography].forEach((pair) => {\n          if (pair[1] === activeArea) {\n            newRows.push({\n              id: cnt,\n              target: targ.number,\n              indicator: indi.number,\n              infocus: pair[0],\n              reference: data.infocus[indi.number],\n            });\n            cnt++;\n          }\n        });\n      });\n    });\n    setRows(newRows);\n  }, [activeArea, data, demography]);\n  if (activeArea === -1)\n    return <div className=\"table-container\">Select an Area</div>;\n  else {\n    return (\n      <div className=\"table-container\">\n        <DataGrid\n          rows={rows}\n          loading={rows.length === 0}\n          columns={columns}\n          pageSize={20}\n          rowHeight={30}\n          rowsPerPageOptions={[20]}\n        />\n      </div>\n    );\n  }\n}\n","import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","const colors = [\n  \"#acacb1\",\n  \"#04ac54\",\n  \"#fcfc24\",\n  \"#ffc404\",\n  \"#fc1404\",\n  \"#8c0404\",\n];\n\nexport default colors;\n","import React, { useRef, useEffect } from \"react\";\nimport { select, geoPath, geoMercator, scaleThreshold, event } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\nimport colors from \"./colors\";\nfunction GeoChart({\n  target,\n  indicator,\n  myData,\n  activeArea,\n  setActiveArea,\n  demography,\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const names = [\n    \"No Data\",\n    \"<20%\",\n    \"20-39.9%\",\n    \"40-59.9%\",\n    \"60-79.9%\",\n    \">=80%\",\n  ];\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const container = select(wrapperRef.current);\n    const tooltip = container\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .attr(\"id\", \"tooltip\")\n      .style(\"opacity\", 0);\n    const colorScale = scaleThreshold()\n      .domain([1, 20, 40, 60, 80, 100])\n      .range(colors);\n\n    // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // projects geo-coordinates on a 2D plane\n    const projection = geoMercator()\n      .fitSize([width, height], myData[demography + \"_map\"])\n      .precision(100);\n\n    let mouseOver = function (d) {\n      svg\n        .selectAll(\".country\")\n        .transition()\n        .duration(200)\n        .style(\"opacity\", 0.5);\n      select(this).transition().duration(200).style(\"opacity\", 1);\n      tooltip.style(\"opacity\", 0.9);\n      tooltip\n        .html(() => {\n          return (\n            d.properties.DIST_NAME + \", \" + getScore(d.properties.DIST_NAME)\n          );\n        })\n        .style(\"left\", `${event.pageX}px`)\n        .style(\"top\", `${event.pageY - 150}px`);\n    };\n\n    let mouseLeave = function () {\n      svg.selectAll(\".country\").transition().duration(200).style(\"opacity\", 1);\n      tooltip.style(\"opacity\", 0);\n    };\n\n    // takes geojson data,\n    // transforms that into the d attribute of a path element\n    const pathGenerator = geoPath().projection(projection);\n\n    function getScore(district) {\n      // console.log(district);\n      let ind = myData[demography + \"_indices\"][district];\n      // console.log(ind, district);\n      let filteredData = myData.targets[target].indicators[indicator].values[\n        demography\n      ].filter((item) => {\n        return item[1] === ind;\n      });\n      return filteredData[0][0];\n    }\n\n    // render each country\n    svg\n      .selectAll(\".country\")\n      .data(myData[demography + \"_map\"].features)\n      .join(\"path\")\n      .style(\"opacity\", 1)\n      .on(\"mouseover\", mouseOver)\n      .on(\"mouseleave\", mouseLeave)\n      .on(\"click\", (feature) => {\n        tooltip.style(\"opacity\", 0);\n        if (\n          activeArea ===\n          myData[demography + \"_indices\"][feature.properties.DIST_NAME]\n        ) {\n          setActiveArea(-1);\n        } else {\n          setActiveArea(\n            myData[demography + \"_indices\"][feature.properties.DIST_NAME]\n          );\n        }\n      })\n      .transition()\n      .attr(\"class\", \"country\")\n      .attr(\"fill\", (feature) =>\n        colorScale(getScore(feature.properties[\"DIST_NAME\"]))\n      )\n      .attr(\"d\", (feature) => pathGenerator(feature));\n\n    // render text\n  }, [\n    dimensions,\n    target,\n    indicator,\n    activeArea,\n    myData,\n    demography,\n    setActiveArea,\n  ]);\n\n  return (\n    <div ref={wrapperRef} style={{ position: \"relative\", width: \"50%\" }}>\n      <svg className=\"map-points\" ref={svgRef}></svg>\n      <div className=\"axis\">\n        {colors.map((color, idx) => {\n          return (\n            <div className=\"legend-item\" key={idx}>\n              <button style={{ background: color }}></button>\n              <span>&emsp;{names[idx]}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\nexport default GeoChart;\n","import { faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { React, useState, useEffect } from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\nimport Dropdown from \"../Components/Dropdown\";\nimport Table from \"../Components/Table\";\nimport GeoChart from \"../Components/GeoChart\";\nexport default function Infographics({\n  demography,\n  setDemography,\n  target,\n  setTarget,\n  indicator,\n  setIndicator,\n  data,\n  setData,\n  fetchData,\n}) {\n  const [activeArea, setActiveArea] = useState(-1);\n  const [options] = useState({\n    annotations: {\n      points: [\n        {\n          x: \"Rajasthan\",\n          label: {\n            borderColor: \"#775DD0\",\n            offsetY: 0,\n            style: {\n              color: \"#fff\",\n              background: \"#775DD0\",\n            },\n            text: \"Average State Value\",\n          },\n        },\n      ],\n    },\n    chart: {\n      events: {\n        dataPointSelection: (event, chartContext, config) => {\n          if (config.selectedDataPoints[0].length) {\n            let district =\n              chartContext.data.twoDSeriesX[config.selectedDataPoints[0][0]];\n            // console.log(district);\n            setActiveArea(data[demography + \"_indices\"][district]);\n          } else {\n            setActiveArea(-1);\n          }\n        },\n      },\n    },\n    plotOptions: {\n      bar: {\n        borderRadius: 10,\n        columnWidth: \"100%\",\n      },\n    },\n    stroke: {\n      width: 2,\n    },\n\n    grid: {\n      row: {\n        colors: [\"#fff\", \"#f2f2f2\"],\n      },\n    },\n    xaxis: {\n      labels: {\n        rotate: -45,\n      },\n    },\n    yaxis: {\n      title: {\n        text: \"Score\",\n      },\n    },\n    fill: {\n      type: \"gradient\",\n      gradient: {\n        shade: \"light\",\n        type: \"horizontal\",\n        shadeIntensity: 0.25,\n        gradientToColors: undefined,\n        inverseColors: true,\n        opacityFrom: 0.85,\n        opacityTo: 0.85,\n        stops: [50, 0, 100],\n      },\n    },\n  });\n  function getSeries(list) {\n    // console.log(list);\n    var vals = list.map((item) => {\n      return {\n        x: data[demography + \"_names\"][item[1]],\n        y: item[0],\n      };\n    });\n    vals.push({\n      x: \"Rajasthan\",\n      y: data.infocus[data.targets[target].indicators[indicator].number],\n    });\n    vals = vals.sort(function (a, b) {\n      if (a.y < b.y) return 1;\n      else if (a.y > b.y) return -1;\n      return 0;\n    });\n    // console.log(vals);\n    return [\n      {\n        name: \"Score\",\n        data: vals,\n      },\n    ];\n  }\n  useEffect(() => {\n    if (data === null) {\n      fetchData();\n    }\n  }, [data, fetchData]);\n  if (data === null) return <div>Fetching...</div>;\n  else\n    return (\n      <div className=\"infographics\">\n        <div className=\"options-area\">\n          <div className=\"home-button\">\n            <a href=\"/\">\n              <button>\n                <FontAwesomeIcon icon={faHome} size=\"2x\" />\n              </button>\n            </a>\n          </div>\n          <div className=\"left\">\n            <div className=\"container\">\n              <button\n                className={`dem-button ${\n                  demography === \"state\" ? \"button-active\" : \"\"\n                }`}\n                style={{ borderRadius: \"10px 0 0 10px\" }}\n                onClick={() => {\n                  setDemography(\"state\");\n                }}\n              >\n                State\n              </button>\n              <button\n                className={`dem-button ${\n                  demography === \"district\" ? \"button-active\" : \"\"\n                }`}\n                style={{ borderRadius: \"0 10px 10px 0\" }}\n                onClick={() => {\n                  setDemography(\"district\");\n                }}\n              >\n                District\n              </button>\n            </div>\n          </div>\n          <div className=\"middle\">\n            <Dropdown\n              list={data.targets}\n              label={\"Select Target\"}\n              displayed={target}\n              setDisplayed={setTarget}\n            />\n          </div>\n          <div className=\"right\">\n            <Dropdown\n              list={data.targets[target].indicators}\n              label={\"Select Indicator\"}\n              displayed={indicator}\n              setDisplayed={setIndicator}\n            />\n          </div>\n        </div>\n        <div className=\"map-area\">\n          <GeoChart\n            indicator={indicator}\n            target={target}\n            myData={data}\n            activeArea={activeArea}\n            setActiveArea={setActiveArea}\n            demography={demography}\n          />\n          {activeArea !== -1 && (\n            <Table\n              activeArea={activeArea}\n              data={data}\n              demography={demography}\n            />\n          )}\n        </div>\n        <div className=\"all-districts-chart\">\n          <ReactApexChart\n            type=\"bar\"\n            height=\"400px\"\n            options={options}\n            series={getSeries(\n              data.targets[target].indicators[indicator].values[demography]\n            )}\n          />\n        </div>\n      </div>\n    );\n}\n","import { React, useState, useEffect } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./Pages/Home\";\nimport Infographics from \"./Pages/Infographics\";\nimport \"./App.scss\";\nimport axios from \"axios\";\nexport default function App() {\n  const [demography, setDemography] = useState(\"state\");\n  const [indicator, setIndicator] = useState(0);\n  const [target, setTarget] = useState(0);\n  const [data, setData] = useState(null);\n  const fetchData = async () => {\n    try {\n      let resp = await axios.get(\n        \"https://sdg2dashboard.herokuapp.com/readData\"\n      );\n      setData((data) => resp.data);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() => {\n    if (data === null) {\n      fetchData();\n    }\n  }, [data]);\n  if (data === null) return <div>Fetching...</div>;\n  else {\n    // console.log(data);\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n          <div className=\"container\">\n            <img src=\"/assets/dpdeslogo.png\" alt=\"DPDES Logo\"></img>\n            <img src=\"/assets/sdg2logo.png\" alt=\"SDG2 Logo\"></img>\n          </div>\n        </div>\n        <div className=\"body\">\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={(props) => (\n                <Home\n                  allTargets={data.targets}\n                  setTarget={setTarget}\n                  demography={demography}\n                  setDemography={setDemography}\n                />\n              )}\n            />\n            <Route\n              path=\"/infographics\"\n              render={(props) => (\n                <Infographics\n                  demography={demography}\n                  setDemography={setDemography}\n                  target={target}\n                  setTarget={setTarget}\n                  indicator={indicator}\n                  setIndicator={setIndicator}\n                  data={data}\n                  setData={setData}\n                  fetchData={fetchData}\n                />\n              )}\n            />\n          </Switch>\n        </div>\n        <div className=\"footer\">\n          <div className=\"container\">\n            <div>\n              <h1>Quick Links</h1>\n              <ul>\n                <li>Niti Aayog</li>\n                <li>MoSPI, GoI</li>\n                <li>Department of Planning, GoR</li>\n              </ul>\n            </div>\n            <div style={{ textAlign: \"center\" }}>\n              <img src=\"assets/wfplogo.png\" alt=\"WFP Logo\"></img>\n            </div>\n            <div>\n              <h1>Developed in collaboration with:</h1>\n              <p>\n                Public systems Lab, Indian Institute of Technology, Delhi <br />\n                Contact: 011-26596317\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}